# Copyright Â© 2019 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: BSD-2-Clause

heat_template_version: "2018-08-31"
description: "Heat Stack to create an Essential PKS cluster with Calico CNI"

parameters:
  name:
    type: string
    label: Cluster Name
    description: Unique name for this Kubernetes cluster.
  image:
    type: string
    label: Image
    description: Image to use for the Kubernetes cluster nodes
  availability_zone:
    type: string
    label: Availability Zone
    default: nova
    description: Availability zone for the Kubernetes cluster nodes
  key_name:
    type: string
    label: Key Name
    description: Key pair name to use when starting cluster nodes
  mgmt_net_cidr:
    type: string
    label: Private Network CIDR
    description: CIDR for the cluster private network
    default: "10.0.0.0/24"
  public_network_id:
    type: string
    label: Public Network ID
    description: UUID of the public network
  public_subnet_id:
    type: string
    label: Public Subnet Id
    description: UUID of the public subnet to assign LoadBalancer IPs
  pod_network_cidr:
    type: string
    label: POD network CIDR
    default: 192.168.0.0/16
  nameserver:
    type: string
    label: Nameserver for management network
    default: 192.168.111.1
  master_count:
    type: number
    label: Master Node Count
    description: Number of master node to spin up
    default: 2
  minion_count:
    type: number
    label: Minion Node Count
    description: Number of minion nodes to spin up
    default: 3
  master_flavor:
    type: string
    label: Instance flavor name for Master nodes
    default: "m1.medium"
  minion_flavor:
    type: string
    label: Instance flavor name for Minion nodes
    default: "m1.medium"
  os_username:
    type: string
    label: Openstack username
  os_password:
    type: string
    label: Openstack password
  os_tenant_id:
    type: string
    label: Openstack tenant id
  os_domain_id:
    type: string
    label: Openstack domain id
  keystone_ip:
    type: string
    label: IP address of the keystone endpoint
  ssh_private_key:
    type: string

resources:
  k8s_secgroup:
    type: ../lib/k8s_secgroup.yaml

  open_secgroup:
    type: ../lib/open_secgroup.yaml

  mgmt_network:
    type: "OS::Neutron::Net"
    properties:
      admin_state_up: true
      name:
        list_join: ['-', [{get_param: name}, 'mgmt']]

  mgmt_subnet:
    type: "OS::Neutron::Subnet"
    properties:
      name:
        list_join: ['-', [{get_param: name}, 'mgmt-sub']]
      network: { get_resource: mgmt_network }
      ip_version: 4
      cidr: { get_param: mgmt_net_cidr }
      enable_dhcp: true
      dns_nameservers: [{ get_param: nameserver }]

  master_mgmt_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: mgmt_network }
      security_groups: [ get_resource: k8s_secgroup ]
      fixed_ips:
      - subnet_id: { get_resource: mgmt_subnet }

  mgmt_router:
    type: "OS::Neutron::Router"
    properties:
      external_gateway_info:
        enable_snat: true
        network: { get_param: public_network_id }
      admin_state_up: true
      name:
        list_join: ['-', [{get_param: name}, 'mgmt-router']]

  mgmt_router_interface:
    type: "OS::Neutron::RouterInterface"
    properties:
      router: { get_resource: mgmt_router }
      subnet: { get_resource: mgmt_subnet }

  mgmt_fip:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network: { get_param: public_network_id }

  master_node_fip:
    type: "OS::Neutron::FloatingIPAssociation"
    properties:
      floatingip_id: { get_resource: mgmt_fip }
      port_id: { get_resource: master_mgmt_port }

  master_lb:
    type: "OS::Neutron::LBaaS::LoadBalancer"
    properties:
      vip_subnet: { get_resource: mgmt_subnet }
    depends_on: mgmt_router_interface

  master_lb_listener:
    type: "OS::Neutron::LBaaS::Listener"
    properties:
      protocol: TCP
      protocol_port: 6443
      loadbalancer: { get_resource: master_lb }

  master_lb_pool:
    type: "OS::Neutron::LBaaS::Pool"
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: TCP
      listener: { get_resource: master_lb_listener }

  master_lb_pool_member:
    type: "OS::Neutron::LBaaS::PoolMember"
    properties:
      address: { get_attr: [main_master_node, networks, list_join: ['-', [{get_param: name}, 'mgmt']], 0]}
      pool: { get_resource: master_lb_pool }
      protocol_port: 6443
      subnet: { get_resource: mgmt_subnet }

  master_lb_monitor:
    type: "OS::Neutron::LBaaS::HealthMonitor"
    properties:
      delay: 5
      max_retries: 3
      pool: { get_resource: master_lb_pool }
      timeout: 5
      type: TCP

  master_lb_fip:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network: { get_param: public_network_id }

  master_lb_fip_assoc:
    type: "OS::Neutron::FloatingIPAssociation"
    properties:
      floatingip_id: { get_resource: master_lb_fip }
      port_id: { get_attr: [master_lb, vip_port_id] }

  main_master_node:
    type: "OS::Nova::Server"
    properties:
      name:
        list_join: ['-', [{get_param: name}, 'master-main']]
      networks:
      - port: { get_resource: master_mgmt_port }
      flavor: { get_param: master_flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      key_name: { get_param: key_name }
      config_drive: true
      user_data_format: RAW
      user_data:
        get_resource: kube_master_init

  additional_master_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count:
        yaql:
          expression: int($.data.master_count - 1)
          data:
            master_count: { get_param: master_count }
      resource_def:
        type: ../lib/master_node_with_fip_calico.yaml
        properties:
          name:
            str_replace:
              template: $name-master-%index%
              params:
                $name: { get_param: name }
          mgmt_network: { get_resource: mgmt_network }
          mgmt_subnet: { get_resource: mgmt_subnet }
          k8s_secgroup: { get_resource: k8s_secgroup }
          availability_zone: { get_param: availability_zone }
          key_name: { get_param: key_name }
          init_routine: { get_resource: kube_addl_master_init }
          image: { get_param: image }
          public_network_id: { get_param: public_network_id }
          master_lb_pool: { get_resource: master_lb_pool }
          master_flavor: { get_param: master_flavor }

  minion_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: minion_count }
      resource_def:
        type: "OS::Nova::Server"
        properties:
          name:
            str_replace:
              template: $name-minion-%index%
              params:
                $name: { get_param: name }
          networks:
          - network: { get_resource: mgmt_network }
          security_groups: [ get_resource: k8s_secgroup ]
          flavor: { get_param: minion_flavor }
          image: { get_param: image }
          availability_zone: { get_param: availability_zone }
          key_name: { get_param: key_name }
          user_data_format: RAW
          user_data:
            get_resource: kube_minion_init



  vm_init:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        #!/bin/bash
        cd /root
        curl http://192.168.0.252/vmware-kubernetes-v1.14.3+vmware.1.tar.gz -o vmware-kubernetes-v1.14.3+vmware.1.tar.gz
        curl -O http://192.168.0.252/calico_cni_v3.7.5.tar
        curl -O http://192.168.0.252/calico_node_v3.7.5.tar
        curl -O http://192.168.0.252/calico_kube-controllers_v3.7.5.tar

        curl -O http://192.168.0.252/k8scloudprovider_openstack-cloud-controller-manager_v1.14.0.tar
        curl -O http://192.168.0.252/docker.io_k8scloudprovider_cinder-csi-plugin_v1.14.0.tar

        curl -O http://192.168.0.252/quay.io_k8scsi_csi-node-driver-registrar_v1.1.0.tar
        curl -O http://192.168.0.252/quay.io_k8scsi_csi-attacher_v1.1.1.tar
        curl -O http://192.168.0.252/quay.io_k8scsi_csi-provisioner_v1.2.0.tar
        curl -O http://192.168.0.252/quay.io_k8scsi_csi-snapshotter_v1.2.0.tar

        curl -O http://192.168.0.252/calico.yaml

        curl -O http://192.168.0.252/csi-attacher-rbac.yaml
        curl -O http://192.168.0.252/csi-nodeplugin-rbac.yaml
        curl -O http://192.168.0.252/csi-provisioner-rbac.yaml
        curl -O http://192.168.0.252/csi-snapshotter-rbac.yaml

        curl -O http://192.168.0.252/csi-nodeplugin-cinderplugin.yaml
        curl -O http://192.168.0.252/csi-attacher-cinderplugin.yaml
        curl -O http://192.168.0.252/csi-provisioner-cinderplugin.yaml
        curl -O http://192.168.0.252/csi-snapshotter-cinderplugin.yaml

        curl -O http://192.168.0.252/cloud-controller-manager-role-bindings.yaml
        curl -O http://192.168.0.252/cloud-controller-manager-roles.yaml
        curl -O http://192.168.0.252/cloud-controller-manager-roles.yaml

        source /usr/share/bash-completion/bash_completion
        echo "source /usr/share/bash-completion/bash_completion" >> ~/.bashrc
        git clone https://github.com/ahmetb/kubectx /opt/kubectx
        ln -s /opt/kubectx/kubens /usr/local/bin/kubens


  kube_master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: vm_init }

  kube_minion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: vm_init }

  kube_addl_master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: vm_init }

